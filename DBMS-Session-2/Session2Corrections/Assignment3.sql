CREATE DATABASE storefront;

USE storefront;

CREATE TABLE USERS(
    UserID INT AUTO_INCREMENT,
    Email VARCHAR(100) NOT NULL UNIQUE,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    DOB DATE,
    Password VARCHAR(25),
    PRIMARY KEY (UserID)
);

CREATE TABLE ADDRESSES(
    AddressID INT PRIMARY KEY,
    City VARCHAR(50),
    Location VARCHAR(500),
    ZipCode INT,
    PhoneNo VARCHAR(10),
    State VARCHAR(30)
);

CREATE TABLE ROLES(
    RoleID INT PRIMARY KEY AUTO_INCREMENT,
    RoleType VARCHAR(15)
);

CREATE TABLE USERS_ROLES(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    RoleID INT,
    FOREIGN KEY (UserID) REFERENCES USERS(UserID),
    FOREIGN KEY (RoleID) REFERENCES ROLES(RoleID)
);

  
CREATE TABLE ADDRESSES_USERS(
    ID INT PRIMARY KEY,
    AddressID INT,
    UserID INT,
    FOREIGN KEY (AddressID) REFERENCES ADDRESSES(AddressID),
    FOREIGN KEY (UserID) REFERENCES USERS(UserID)
);

CREATE TABLE CATEGORIES(
    CategoryID INT PRIMARY KEY AUTO_INCREMENT,
    Type VARCHAR(100),
    ParentCategory INT DEFAULT 0
);


CREATE TABLE PRODUCTS(
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Brand VARCHAR(100),
    Cost FLOAT(10,2) NOT NULL,
    Quantity INT,
    Description VARCHAR(300),
    IsActive BOOLEAN DEFAULT false
);


CREATE TABLE PRODUCTS_CATEGORIES(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ProductID INT,
    CategoryID INT,
    FOREIGN KEY (ProductID) REFERENCES PRODUCTS(ProductID),
    FOREIGN KEY (CategoryID) REFERENCES CATEGORIES(CategoryID)
);

CREATE TABLE IMAGES(
   ImageID INT AUTO_INCREMENT PRIMARY KEY,
   ImageURL VARCHAR(100),
   ImageName VARCHAR(50),
   ProductID INT NOT NULL,
   FOREIGN KEY (ProductID) REFERENCES PRODUCTS(ProductID)
);

CREATE TABLE ORDERS(
   OrderID INT AUTO_INCREMENT PRIMARY KEY,
   PlacedDate DATE,
   ExpectedDeliveryDate DATE,
   UserID INT,
   FOREIGN KEY (UserID) REFERENCES USERS(UserID)
);
   

CREATE TABLE PRODUCTS_ORDERS(
   ID INT PRIMARY KEY AUTO_INCREMENT,
   OrderID INT,
   ProductID INT,
   ProductDeliveryTime DATE,
   ProductActualDeliveryTime DATE,
   IsDelivered BOOLEAN DEFAULT false,
   State VARCHAR(15) DEFAULT "Order Placed",
    FOREIGN KEY (OrderID) REFERENCES ORDERS(OrderID),
    FOREIGN KEY (ProductID) REFERENCES PRODUCTS(ProductID)
);

ALTER TABLE PRODUCTS
ADD Timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE ORDERS
ADD Timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;

LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/userData.txt' 
INTO TABLE USERS
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';

LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/role.txt' 
INTO TABLE ROLES
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';

LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/role_user.txt' 
INTO TABLE USERS_ROLES
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';


LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/categoryData.txt' 
INTO TABLE CATEGORIES
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';


LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/product_data.txt'
INTO TABLE PRODUCTS
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n'
(ProductID,Name,Brand,Cost,Quantity,Description)
SET Timestamp=CURRENT_TIMESTAMP;


LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/image_data.txt' 
INTO TABLE IMAGES
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n';


LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/product_category.txt' 
INTO TABLE PRODUCTS_CATEGORIES
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n';

LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/orderData.txt'
INTO TABLE ORDERS
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n'
(OrderID,PlacedDate,ExpectedDeliveryDate,UserID)
SET Timestamp=CURRENT_TIMESTAMP;

LOAD DATA INFILE 'C:/Users/Aakanksha/Desktop/Session2Corrections/StoreFront Data/productOrder.txt' 
INTO TABLE PRODUCTS_ORDERS
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n';


#Q2
SELECT PRODUCTS_ORDERS.OrderID, COUNT(PRODUCTS_ORDERS.OrderID) AS Total_Product, SUM(PRODUCTS.Cost) AS Total_cost 
FROM PRODUCTS_ORDERS
LEFT JOIN PRODUCTS
ON PRODUCTS_ORDERS.ProductID=PRODUCTS.ProductID 
GROUP BY PRODUCTS_ORDERS.OrderID 
ORDER BY Total_cost 
DESC LIMIT 10;

#Q1
SELECT t.OrderID, ORDERS.PlacedDate, t.Total_cost FROM 
(SELECT PRODUCTS_ORDERS.OrderID, COUNT(PRODUCTS_ORDERS.OrderID) AS Total_Product, SUM(PRODUCTS.Cost) AS Total_cost
FROM PRODUCTS_ORDERS
LEFT JOIN PRODUCTS
ON PRODUCTS_ORDERS.ProductID=PRODUCTS.ProductID 
GROUP BY PRODUCTS_ORDERS.OrderID) AS t
LEFT JOIN ORDERS
ON
t.OrderID=ORDERS.OrderID ORDER BY ORDERS.PlacedDate DESC LIMIT 50;

#Q3
SELECT t.OrderID, t.PlacedDate, t.State FROM
(SELECT ORDERS.OrderID,ORDERS.PlacedDate,PRODUCTS_ORDERS.State FROM ORDERS
LEFT JOIN PRODUCTS_ORDERS
ON ORDERS.OrderID = PRODUCTS_ORDERS.OrderID) AS t
WHERE t.PlacedDate < CURRENT_DATE - INTERVAL '10' DAY AND CURRENT_DATE;


#Q4
SELECT ORDERS.OrderID, ORDERS.PlacedDate FROM ORDERS
WHERE  ORDERS.PlacedDate NOT IN(
SELECT ORDERS.PlacedDate FROM ORDERS
RIGHT JOIN USERS
ON ORDERS.UserID = USERS.UserID
WHERE ORDERS.PlacedDate > CURRENT_DATE - INTERVAL + '2' MONTH AND CURRENT_DATE);

#Q5
SELECT USERS.UserID, ORDERS.OrderID, ORDERS.PlacedDate FROM ORDERS
RIGHT JOIN USERS
ON ORDERS.UserID = USERS.UserID
WHERE ORDERS.PlacedDate between CURRENT_DATE - INTERVAL+ '15' DAY AND CURRENT_DATE;

#Q6
SELECT u.OrderID, u.state, PRODUCTS.ProductID, PRODUCTS.Name
FROM(
SELECT t.OrderID, t.PlacedDate, t.State, t.ProductID FROM
(SELECT ORDERS.OrderID,ORDERS.PlacedDate,PRODUCTS_ORDERS.State, PRODUCTS_ORDERS.ProductID  FROM ORDERS
LEFT JOIN PRODUCTS_ORDERS
ON ORDERS.OrderID = PRODUCTS_ORDERS.OrderID) AS t
WHERE t.State LIKE '%Shipped%')as u
LEFT JOIN PRODUCTS
ON
u.ProductID = PRODUCTS.ProductID
WHERE u.OrderID = 2;


#Q7
SELECT u.OrderID, u.state, PRODUCTS.ProductID, PRODUCTS.Name, PRODUCTS.Cost
FROM(
SELECT t.OrderID, t.PlacedDate, t.State, t.ProductID FROM
(SELECT ORDERS.OrderID,ORDERS.PlacedDate,PRODUCTS_ORDERS.State, PRODUCTS_ORDERS.ProductID  FROM ORDERS
LEFT JOIN PRODUCTS_ORDERS
ON ORDERS.OrderID = PRODUCTS_ORDERS.OrderID) AS t
)as u
LEFT JOIN PRODUCTS
ON
u.ProductID = PRODUCTS.ProductID
WHERE PRODUCTS.Cost > 30 AND PRODUCTS.Cost < 250;

#Q8
UPDATE PRODUCTS_ORDERS 
INNER JOIN ORDERS ON PRODUCTS_ORDERS.OrderID=ORDERS.OrderID
SET PRODUCTS_ORDERS.State = 'Shipped'
WHERE ORDERS.PlacedDate = '2018-12-03';

SELECT PRODUCTS_ORDERS.OrderID, PRODUCTS_ORDERS.State FROM PRODUCTS_ORDERS 
INNER JOIN ORDERS 
ON PRODUCTS_ORDERS.OrderID=ORDERS.OrderID
WHERE ORDERS.PlacedDate = '2018-12-03';
