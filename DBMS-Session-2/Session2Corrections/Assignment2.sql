CREATE DATABASE storefront;

USE storefront;

CREATE TABLE USERS(
    UserID INT AUTO_INCREMENT,
    Email VARCHAR(100) NOT NULL UNIQUE,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    DOB DATE,
    Password VARCHAR(25),
    PRIMARY KEY (UserID)
);

CREATE TABLE ADDRESSES(
    AddressID INT PRIMARY KEY,
    City VARCHAR(50),
    Location VARCHAR(500),
    ZipCode INT,
    PhoneNo VARCHAR(10),
    State VARCHAR(30)
);

CREATE TABLE ROLES(
    RoleID INT PRIMARY KEY AUTO_INCREMENT,
    RoleType VARCHAR(15)
);

CREATE TABLE USERS_ROLES(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    RoleID INT,
    FOREIGN KEY (UserID) REFERENCES USERS(UserID),
    FOREIGN KEY (RoleID) REFERENCES ROLES(RoleID)
);

  
CREATE TABLE ADDRESSES_USERS(
    ID INT PRIMARY KEY,
    AddressID INT,
    UserID INT,
    FOREIGN KEY (AddressID) REFERENCES ADDRESSES(AddressID),
    FOREIGN KEY (UserID) REFERENCES USERS(UserID)
);

CREATE TABLE CATEGORIES(
    CategoryID INT PRIMARY KEY AUTO_INCREMENT,
    Type VARCHAR(100),
    ParentCategory INT DEFAULT 0
);


CREATE TABLE PRODUCTS(
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Brand VARCHAR(100),
    Cost FLOAT(10,2) NOT NULL,
    Quantity INT,
    Description VARCHAR(300),
    IsActive BOOLEAN DEFAULT false
);


CREATE TABLE PRODUCTS_CATEGORIES(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ProductID INT,
    CategoryID INT,
    FOREIGN KEY (ProductID) REFERENCES PRODUCTS(ProductID),
    FOREIGN KEY (CategoryID) REFERENCES CATEGORIES(CategoryID)
);

CREATE TABLE IMAGES(
   ImageID INT AUTO_INCREMENT PRIMARY KEY,
   ImageURL VARCHAR(100),
   ImageName VARCHAR(50),
   ProductID INT NOT NULL,
   FOREIGN KEY (ProductID) REFERENCES PRODUCTS(ProductID)
);

CREATE TABLE ORDERS(
   OrderID INT AUTO_INCREMENT PRIMARY KEY,
   PlacedDate DATE,
   ExpectedDeliveryDate DATE,
   UserID INT,
   FOREIGN KEY (UserID) REFERENCES USERS(UserID)
);
   

CREATE TABLE PRODUCTS_ORDERS(
   ID INT PRIMARY KEY AUTO_INCREMENT,
   OrderID INT,
   ProductID INT,
   ProductDeliveryTime DATE,
   ProductActualDeliveryTime DATE,
   IsDelivered BOOLEAN DEFAULT false,
   State VARCHAR(15) DEFAULT "Order Placed",
    FOREIGN KEY (OrderID) REFERENCES ORDERS(OrderID),
    FOREIGN KEY (ProductID) REFERENCES PRODUCTS(ProductID)
);

ALTER TABLE PRODUCTS
ADD Timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE ORDERS
ADD Timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;

LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/userData.txt' 
INTO TABLE USERS
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';

LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/role.txt' 
INTO TABLE ROLES
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';

LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/role_user.txt' 
INTO TABLE USERS_ROLES
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';


LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/categoryData.txt' 
INTO TABLE CATEGORIES
FIELDS TERMINATED BY '\t' 
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';


LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/product_data.txt'
INTO TABLE PRODUCTS
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n'
(ProductID,Name,Brand,Cost,Quantity,Description)
SET Timestamp=CURRENT_TIMESTAMP;


LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/image_data.txt' 
INTO TABLE IMAGES
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n';


LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/product_category.txt' 
INTO TABLE PRODUCTS_CATEGORIES
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n';

LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/orderData.txt'
INTO TABLE ORDERS
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n'
(OrderID,PlacedDate,ExpectedDeliveryDate,UserID)
SET Timestamp=CURRENT_TIMESTAMP;

LOAD DATA INFILE 'C:/Users/aakan/Desktop/Session2Corrections/StoreFront Data/productOrder.txt' 
INTO TABLE PRODUCTS_ORDERS
FIELDS TERMINATED BY '\t' 
LINES TERMINATED BY '\r\n';

#Q2

SELECT PRODUCTS.ProductID, ProductS.Name,ProductS.Cost AS price, CATEGORIES.Type AS category_title FROM PRODUCTS 
LEFT JOIN PRODUCTS_CATEGORIES ON PRODUCTS.ProductID = PRODUCTS_CATEGORIES.ProductID
LEFT JOIN CATEGORIES ON CATEGORIES.CategoryID = PRODUCTS_CATEGORIES.CategoryID ORDER BY Timestamp;


#Q3

SELECT PRODUCTS.ProductID, PRODUCTS.Name FROM PRODUCTS
WHERE PRODUCTS.ProductID NOT IN (
SELECT PRODUCTS.ProductID FROM PRODUCTS 
INNER JOIN IMAGES ON PRODUCTS.ProductID = IMAGES.ProductID);

#Q4

SELECT c.Type,
IF (c.ParentCategory = 0, 'Top Category',c1.Type) AS ParentCategory
FROM CATEGORIES c
LEFT JOIN CATEGORIES c1
ON c.ParentCategory = c1.CategoryID ORDER BY ParentCategory;


#q5
SELECT CATEGORIES.CategoryID,CATEGORIES.Type, CATEGORIES.ParentCategory FROM CATEGORIES WHERE CATEGORIES.CategoryID NOT IN 
(SELECT CATEGORIES.ParentCategory FROM CATEGORIES);

#Q6
SELECT PRODUCTS.Name,PRODUCTS.Cost AS price, PRODUCTS.Description, CATEGORIES.Type AS category_title FROM PRODUCTS  
LEFT JOIN PRODUCTS_CATEGORIES ON PRODUCTS.ProductID = PRODUCTS_CATEGORIES.ProductID
LEFT JOIN CATEGORIES ON CATEGORIES.CategoryID = PRODUCTS_CATEGORIES.CategoryID WHERE CATEGORIES.Type = 'Mobiles';

#Q7
SELECT * FROM PRODUCTS WHERE Quantity < 30 ;

#Q8
UPDATE PRODUCTS SET QUANTITY = QUANTITY + 10 
WHERE 1;